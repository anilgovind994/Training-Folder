Exception Handling
in java there are two things
error--that cannot be handled through program-ex:outofmemory
exception--it can be handled

2 thimngs if exception aoocurs:
1,it will sugggest user to handle the exception
2. if the excception is new


exceptions are 2 types-
1 checked (compile time) -user defined,input output operation,database connection,etc
2. unchecked (runtime)-nullpointer,arrayoutof bound,arithematic exception,etc


2 ways of handling exception

1.if you know if exception is not critical if you want to proceed further then u use try-catch

2throws if critical

public class MyClass {
    public static void main(String[] args) {
        MyClass mc = new MyClass();
        int divVal=0;
        try {
            divVal = mc.div(4, 0);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        System.out.println("division value -- " + divVal);
    }
    int div(int a, int b) throws Exception {
        if(b==0) {
            throw new Exception("b val should not be zero");
        }
        return a / b;
    }
}
\

Exceptiojn is super class of all exceptions

public class MyClass {
    public static void main(String[] args) {

 

        try {
            System.out.println("try");
            throw new DivByZeroException("b should be > zero");
        } 
      catch (DivByZeroException | ArithmeticException e) {
            System.out.println("Exception");
        } 
       finally {
            System.out.println("finally");
        }
    }

 

    int div(int a, int b) throws DivByZeroException {
        if (b == 0) {
            throw new DivByZeroException("b should be > zero");
        }
        return a / b;
    }
}

 

class DivByZeroException extends Exception {
    public DivByZeroException() {
    }

 

    public DivByZeroException(String msg) {
        super(msg);
    }
}